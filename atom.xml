<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucky4</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-12T22:40:00.799Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lucky4</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python内置函数</title>
    <link href="http://yoursite.com/2018/06/03/Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/06/03/Python内置函数/</id>
    <published>2018-06-02T17:45:51.000Z</published>
    <updated>2018-06-12T22:40:00.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="循环工具"><a href="#循环工具" class="headerlink" title="循环工具"></a>循环工具</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">len()</div><div class="line">range(start, end, step)</div><div class="line">xrange(start, end, step) <span class="comment"># 与range函数的区别就是，该函数是一个一个生成值的。</span></div></pre></td></tr></table></figure><p>要学会利用range函数生成倒序的序列<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">    <span class="keyword">print</span> i <span class="comment"># 5, 4, 3, 2, 1, 0</span></div></pre></td></tr></table></figure></p><p><br></p><h2 id="迭代工具"><a href="#迭代工具" class="headerlink" title="迭代工具"></a>迭代工具</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">filter()</div><div class="line">map()</div><div class="line">reduce()</div></pre></td></tr></table></figure><p><br></p><h2 id="二进制表示"><a href="#二进制表示" class="headerlink" title="二进制表示"></a>二进制表示</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin()</div></pre></td></tr></table></figure><p><br></p><h2 id="极值"><a href="#极值" class="headerlink" title="极值"></a>极值</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">max()</div><div class="line">min()</div></pre></td></tr></table></figure><p><br></p><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int()</div><div class="line">str()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;循环工具&quot;&gt;&lt;a href=&quot;#循环工具&quot; class=&quot;headerlink&quot; title=&quot;循环工具&quot;&gt;&lt;/a&gt;循环工具&lt;/h2&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>解析DBLP数据集</title>
    <link href="http://yoursite.com/2018/04/22/%E8%A7%A3%E6%9E%90DBLP%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>http://yoursite.com/2018/04/22/解析DBLP数据集/</id>
    <published>2018-04-21T23:12:07.000Z</published>
    <updated>2018-04-26T17:54:34.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>放弃了找实习的念头后，决心搞论文。冥思苦想了好长时间，终于决定了方向，和学者合作网络相关。于是开始了提取dblp数据集，在刚开始运行脚本的时候总是报一个错误，“IOError: [Errno 2] : ‘dblp.dtd’”。</p><p>以下是xml文件格式：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE dblp SYSTEM "dblp.dtd"&gt;</span></div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure></p><p>思考了好久后终于明白，是因为项目中缺少dtd文件，导致程序找不到报错。接下来是关于xml方面的知识，之后讲解dblp解析数据。<br><br></p><h2 id="关于XML"><a href="#关于XML" class="headerlink" title="关于XML"></a>关于XML</h2><h4 id="什么是-XML"><a href="#什么是-XML" class="headerlink" title="什么是 XML?"></a>什么是 XML?</h4><ul><li>XML 指可扩展标记语言（EXtensible Markup Language）。</li><li>XML 是一种标记语言，很类似 HTML。</li><li>XML 的设计宗旨是传输数据，而非显示数据。<br><br></li></ul><h4 id="XML验证"><a href="#XML验证" class="headerlink" title="XML验证"></a>XML验证</h4><p>形式良好的XML文档会遵守前几章介绍过的 XML 语法规则：</p><ul><li>XML 文档必须有根元素</li><li>XML 文档必须有关闭标签</li><li>XML 标签对大小写敏感</li><li>XML 元素必须被正确的嵌套</li><li>XML 属性必须加引号</li></ul><p>合法的 XML 文档是“形式良好”的 XML 文档，同样遵守文档类型定义 (DTD) 的语法规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</div><div class="line">&lt;!DOCTYPE note SYSTEM &quot;Note.dtd&quot;&gt;</div><div class="line">&lt;note&gt;</div><div class="line">&lt;to&gt;George&lt;/to&gt;</div><div class="line">&lt;from&gt;John&lt;/from&gt;</div><div class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</div><div class="line">&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;</div><div class="line">&lt;/note&gt;</div></pre></td></tr></table></figure></p><p>DTD(Document Type Definition)的作用是定义 XML 文档的结构。它使用一系列合法的元素来定义文档结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE note [</div><div class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</div><div class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</div><div class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</div><div class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</div><div class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</div><div class="line">]&gt;</div></pre></td></tr></table></figure></p><h2 id="SAX"><a href="#SAX" class="headerlink" title="SAX"></a>SAX</h2><p>sax是Python提供的一个解析xml文件的库，从它的源码中可以看出它提供了一些事件处理程序，通过实现这些处理程序完成解析功能，实现了C编写的Python处理模块提供的接口。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;放弃了找实习的念头后，决心搞论文。冥思苦想了好长时间，终于决定了方向，和学者合作网络相关。于是开始了提取dblp数据集，在刚开始运行脚本的时
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>随便记录的笔试题</title>
    <link href="http://yoursite.com/2018/04/19/%E9%9A%8F%E4%BE%BF%E8%AE%B0%E5%BD%95%E7%9A%84%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/19/随便记录的笔试题/</id>
    <published>2018-04-19T03:28:01.000Z</published>
    <updated>2018-04-26T02:45:18.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018春季百度前端笔试题"><a href="#2018春季百度前端笔试题" class="headerlink" title="2018春季百度前端笔试题"></a>2018春季百度前端笔试题</h2><h4 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h4><ul><li>建立一个堆的复杂度？</li><li>给定一串数字(1, 34, 56, 76, 3, 65)哈希函数H(key) = key % 7，采用链地址法，求查找成功时的平均查找长度？</li><li>HTTP报文相关字段，如cache等。</li><li>‘1’ + 0, ‘1’ - 0, ‘1’ * 0</li><li>时间片轮询调度算法？</li><li>触发进程调度的原因？<br><br></li></ul><h4 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h4><ol><li>一个表有三个字段id，price，sales，下面有多条数据，写一段JavaScript代码，如sort(‘price’, ‘asc’)函数，将表中数据按price升序。<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>price<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>900<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>10.0<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>400<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>40.5<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div></pre></td></tr></table></figure></li></ol><p><br></p><h4 id="问答题"><a href="#问答题" class="headerlink" title="问答题"></a>问答题</h4><p>现代JavaScript中有哪些方法可以优化回调陷阱的问题？<br><br></p><h4 id="设计题"><a href="#设计题" class="headerlink" title="设计题"></a>设计题</h4><p>参照一下性能优化建议，设计一个JavaScript工具库，实现在任意HTML中运行该库可以计算出该页面的性能得分。（如dom元素小于200位100分，大于1000为0分）。</p><ul><li>减少DOM元素数量。</li><li>推迟加载非关键JavaScript(defer,async)。</li><li>减少使用iframe。</li><li>样式表置于顶部，JavaScript置于底部。</li><li>不要在HTML中缩放图像。</li><li>为图片资源响应头指定Expires或者Cache-Control并进行Gzip压缩。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018春季百度前端笔试题&quot;&gt;&lt;a href=&quot;#2018春季百度前端笔试题&quot; class=&quot;headerlink&quot; title=&quot;2018春季百度前端笔试题&quot;&gt;&lt;/a&gt;2018春季百度前端笔试题&lt;/h2&gt;&lt;h4 id=&quot;选择题&quot;&gt;&lt;a href=&quot;#选择题&quot; c
      
    
    </summary>
    
    
      <category term="笔试题" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript模块化简介</title>
    <link href="http://yoursite.com/2018/04/08/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/04/08/JavaScript模块化简介/</id>
    <published>2018-04-08T04:49:15.000Z</published>
    <updated>2018-04-17T18:13:47.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CommonJS-RequireJS-AMD-CMD之间的关系"><a href="#CommonJS-RequireJS-AMD-CMD之间的关系" class="headerlink" title="CommonJS,RequireJS,AMD/CMD之间的关系"></a>CommonJS,RequireJS,AMD/CMD之间的关系</h2><ul><li>CommonJS是一个JavaScript面向服务端、桌面开发环境提供的API，它提供包括模块化、命令行等特性。其中在模块加载上CommonJS采用同步加载。著名的NodeJS就是采用的CommonJS标准实现的模块加载机制。</li><li>AMD 是 RequireJS 在推广过程中对模块定义的规范，它定义了兼容浏览器应用的异步模块加载方式。</li><li>CMD 是 SeaJS 在推广过程中对模块定义的规范。</li><li>AMD:提前执行（异步加载：依赖先执行）+延迟执行。</li><li>CMD:延迟执行（运行到需加载，根据顺序执行）。</li></ul><p><br></p><h2 id="为什么要模块化？"><a href="#为什么要模块化？" class="headerlink" title="为什么要模块化？"></a>为什么要模块化？</h2><ul><li>网站开发的方式正在转换成Web apps的方式。</li><li>随着网站变大，代码变的越来越复杂。</li><li>配置变的很困难。</li><li>开发者们想要分离式的模块或文件。</li><li>开发者们只想要一部分代码发送HTTP请求。<br><br></li></ul><h2 id="之前如何写？"><a href="#之前如何写？" class="headerlink" title="之前如何写？"></a>之前如何写？</h2><h4 id="Anonymous-Closures"><a href="#Anonymous-Closures" class="headerlink" title="Anonymous Closures"></a>Anonymous Closures</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// ... all vars and functions are in this scope only</span></div><div class="line"><span class="comment">// still maintains access to all globals</span></div><div class="line">&#125;());</div></pre></td></tr></table></figure><h4 id="Global-Import"><a href="#Global-Import" class="headerlink" title="Global Import"></a>Global Import</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$, YAHOO</span>) </span>&#123;</div><div class="line"><span class="comment">// now have access to globals jQuery (as $) and YAHOO in this code</span></div><div class="line">&#125;(jQuery, YAHOO));</div></pre></td></tr></table></figure><h4 id="Module-Export"><a href="#Module-Export" class="headerlink" title="Module Export"></a>Module Export</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MODULE = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> my = &#123;&#125;,</div><div class="line">privateVariable = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">my.moduleProperty = <span class="number">1</span>;</div><div class="line">my.moduleMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">return</span> my;</div><div class="line">&#125;());</div></pre></td></tr></table></figure><h4 id="Augmentation-耦合"><a href="#Augmentation-耦合" class="headerlink" title="Augmentation(耦合)"></a>Augmentation(耦合)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MODULE = (<span class="function"><span class="keyword">function</span> (<span class="params">my</span>) </span>&#123;</div><div class="line">my.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// added method...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">return</span> my;</div><div class="line">&#125;(MODULE));</div></pre></td></tr></table></figure><h4 id="Loose-Augmentation-松耦合"><a href="#Loose-Augmentation-松耦合" class="headerlink" title="Loose Augmentation(松耦合)"></a>Loose Augmentation(松耦合)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MODULE = (<span class="function"><span class="keyword">function</span> (<span class="params">my</span>) </span>&#123;</div><div class="line"><span class="comment">// add capabilities...</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> my;</div><div class="line">&#125;(MODULE || &#123;&#125;));</div></pre></td></tr></table></figure><h4 id="Tight-Augmentation-紧耦合"><a href="#Tight-Augmentation-紧耦合" class="headerlink" title="Tight Augmentation(紧耦合)"></a>Tight Augmentation(紧耦合)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MODULE = (<span class="function"><span class="keyword">function</span> (<span class="params">my</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> old_moduleMethod = my.moduleMethod;</div><div class="line"></div><div class="line">my.moduleMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// method override, has access to old through old_moduleMethod...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">return</span> my;</div><div class="line">&#125;(MODULE));</div></pre></td></tr></table></figure><h4 id="Cloning-and-Inheritance"><a href="#Cloning-and-Inheritance" class="headerlink" title="Cloning and Inheritance"></a>Cloning and Inheritance</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MODULE_TWO = (<span class="function"><span class="keyword">function</span> (<span class="params">old</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> my = &#123;&#125;,</div><div class="line">key;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> old) &#123;</div><div class="line"><span class="keyword">if</span> (old.hasOwnProperty(key)) &#123;</div><div class="line">my[key] = old[key];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> super_moduleMethod = old.moduleMethod;</div><div class="line">my.moduleMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// override method on the clone, access to super through super_moduleMethod</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">return</span> my;</div><div class="line">&#125;(MODULE));</div></pre></td></tr></table></figure><h4 id="Sub-modules"><a href="#Sub-modules" class="headerlink" title="Sub-modules"></a>Sub-modules</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MODULE.sub = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> my = &#123;&#125;;</div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> my;</div><div class="line">&#125;());</div></pre></td></tr></table></figure><p><br></p><p>参考：<br><a href="http://requirejs.org/" target="_blank" rel="external">http://requirejs.org/</a><br><a href="http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html" target="_blank" rel="external">http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html</a><br><a href="https://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs" target="_blank" rel="external">https://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CommonJS-RequireJS-AMD-CMD之间的关系&quot;&gt;&lt;a href=&quot;#CommonJS-RequireJS-AMD-CMD之间的关系&quot; class=&quot;headerlink&quot; title=&quot;CommonJS,RequireJS,AMD/CMD之间的关
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组常用api</title>
    <link href="http://yoursite.com/2018/04/06/JavaScript%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8api/"/>
    <id>http://yoursite.com/2018/04/06/JavaScript数组常用api/</id>
    <published>2018-04-06T04:26:35.000Z</published>
    <updated>2018-04-06T04:42:07.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort()方法"></a>sort()方法</h2><blockquote><p>语法：arr.sort(compareFunction)</p></blockquote><p>compareFunction可选，用来指定按某种顺序进行排列的函数。</p><p>sort()方法会把数组中元素转换为字符（调用toString()方法），根据每个字符Unicode位点进行排序。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</div><div class="line">values.sort();</div><div class="line">alert(values);       <span class="comment">// 0, 1, 10, 15, 5</span></div></pre></td></tr></table></figure></p><p>比较函数接受两个参数，若第一个参数小于第二个参数则返回负数；若第一个参数等于第二个参数则返回整数；若第一个参数大于第二个参数则返回整数。一个比较函数的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">compareFunction(a, b) &#123;</div><div class="line">  <span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">values.sort(compareFunction);</div><div class="line">alert(values);       <span class="comment">// 0, 1, 5, 10, 15</span></div></pre></td></tr></table></figure></p><p>当 compareFunction 较为复杂，使用 map 辅助排序将会是一个好主意。基本思想是首先将数组中的每个元素比较的实际值取出来，排序后再将数组恢复。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 需要被排序的数组</span></div><div class="line"><span class="keyword">var</span> list = [<span class="string">'Delta'</span>, <span class="string">'alpha'</span>, <span class="string">'CHARLIE'</span>, <span class="string">'bravo'</span>];</div><div class="line"></div><div class="line"><span class="comment">// 对需要排序的数字和位置的临时存储</span></div><div class="line"><span class="keyword">var</span> mapped = list.map(<span class="function"><span class="keyword">function</span>(<span class="params">el, i</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">index</span>: i, <span class="attr">value</span>: el.toLowerCase() &#125;;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 按照多个值排序数组</span></div><div class="line">mapped.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> +(a.value &gt; b.value) || +(a.value === b.value) - <span class="number">1</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 根据索引得到排序的结果</span></div><div class="line"><span class="keyword">var</span> result = mapped.map(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> list[el.index];</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>最后要说的是JavaScript数组中使用的排序算法是in-place类型的，为了节省内存，是不稳定的，因为基于非相邻元素比较的排序算法都是不稳定的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sort-方法&quot;&gt;&lt;a href=&quot;#sort-方法&quot; class=&quot;headerlink&quot; title=&quot;sort()方法&quot;&gt;&lt;/a&gt;sort()方法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;语法：arr.sort(compareFunction)&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React Diff Algorithm</title>
    <link href="http://yoursite.com/2018/04/03/React-Diff-Algorithm/"/>
    <id>http://yoursite.com/2018/04/03/React-Diff-Algorithm/</id>
    <published>2018-04-03T05:02:16.000Z</published>
    <updated>2018-04-03T05:05:51.688Z</updated>
    
    <content type="html"><![CDATA[<p>这个hexo博客加图片实在是太麻烦，这里就贴个链接，忘了的时候多看看吧。<br><a href="https://calendar.perfplanet.com/2013/diff/" target="_blank" rel="external">https://calendar.perfplanet.com/2013/diff/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个hexo博客加图片实在是太麻烦，这里就贴个链接，忘了的时候多看看吧。&lt;br&gt;&lt;a href=&quot;https://calendar.perfplanet.com/2013/diff/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://calen
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>igraph报错cannot_import_name_Graph/module_has_no_attribute_Graph</title>
    <link href="http://yoursite.com/2018/03/31/igraph%E6%8A%A5%E9%94%99cannot-import-name-Graph-module-has-no-attribute-Graph/"/>
    <id>http://yoursite.com/2018/03/31/igraph报错cannot-import-name-Graph-module-has-no-attribute-Graph/</id>
    <published>2018-03-31T03:51:32.000Z</published>
    <updated>2018-03-31T17:12:53.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习使用Python的igraph包进行网络分析，在使用igraph.Graph创建图的过程中，总是报错“module has no attribute Graph”，开始以为是windows不行，换了Linux，发现Linux同样不行，最后发现了原因，就是因为我把要运行的代码文件命名为了igraph.py，导致Python解释器认为我的igraph.py是一个模块，igraph.py当然没有Graph模块了，所以会报错。经过这次这个教训，我决定复习下Python的模块机制<br><br></p><h2 id="模块是程序"><a href="#模块是程序" class="headerlink" title="模块是程序"></a>模块是程序</h2><p>任何Python程序都可以作为模块导入。例如，你定义了一个hello.py文件，同时设置了环境变量，那么你就可以导入该模块。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path.append(<span class="string">'/文件hello.py路径'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hello</div></pre></td></tr></table></figure><p>注意：导入模块“只导入一次”，导入模块并不意味着在导入时执行某些操作，它们主要用于定义，比如变量、函数、类。只导入一次可以避免导入的无线循环。<br><br></p><h2 id="模块用于定义"><a href="#模块用于定义" class="headerlink" title="模块用于定义"></a>模块用于定义</h2><p>模块在第一次导入到程序中时被执行。它们保持自己的作用域，其中定义的类、函数、变量都成为了模块的特性。</p><h4 id="在模块中定义函数"><a href="#在模块中定义函数" class="headerlink" title="在模块中定义函数"></a>在模块中定义函数</h4><p>如我在a.py中定义了helllo函数，同时在b.py中定义了hello函数，我们来看一看调用的区别。</p><p>a.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"a.py"</span></div></pre></td></tr></table></figure></p><p>b.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"b.py"</span></div></pre></td></tr></table></figure></p><p>体会模块保持自己的作用域<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> a <span class="keyword">import</span> *</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> b <span class="keyword">import</span> *</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hello()</div><div class="line"><span class="comment"># 输出b.py，b覆盖了a</span></div></pre></td></tr></table></figure></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> a <span class="keyword">import</span> *</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> b <span class="keyword">import</span> *</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.hello()</div><div class="line"><span class="comment"># 输出a.py</span></div></pre></td></tr></table></figure><h4 id="在模块中增加测试代码"><a href="#在模块中增加测试代码" class="headerlink" title="在模块中增加测试代码"></a>在模块中增加测试代码</h4><p>我们可以设置模块本身是作为程序运行还是导入到其他程序。</p><p>为此，我们可以使用Python中的变量<strong>name</strong>，在“主程序”（包括解释器的交互提示符在内）中，变量<strong>name</strong>的值是”<strong>main</strong>“，而在导入的模块中，这个值被设定为模块的名字。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"Hello world!"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    hello()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>: test()</div></pre></td></tr></table></figure><p><br></p><h2 id="让你的模块可用"><a href="#让你的模块可用" class="headerlink" title="让你的模块可用"></a>让你的模块可用</h2><p>导入模块，执行程序时，解释器在sys.path的路径列表中查找模块。有两种方式可以让你的模块被查找。</p><p>1.将模块放置在合适的位置，只需要找出Python解释器在哪里查找模块。可以将模块放到下面输出位置中。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys, pprint</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pprint.pprint(sys.path)</div><div class="line">[<span class="string">'C:\\Python27\\Lib'</span>,</div><div class="line"><span class="string">'xxx'</span></div><div class="line"><span class="string">'xxx'</span></div><div class="line">]</div></pre></td></tr></table></figure></p><p>2.在PYTHONPATH环境变量中包含模块所在目录。</p><p>3.临时解决方案：sys.pat.append(“/xxx”)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在学习使用Python的igraph包进行网络分析，在使用igraph.Graph创建图的过程中，总是报错“module has no 
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript对象类型</title>
    <link href="http://yoursite.com/2018/03/16/ECMAScript%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/03/16/ECMAScript对象类型/</id>
    <published>2018-03-15T19:38:51.000Z</published>
    <updated>2018-03-21T17:56:35.862Z</updated>
    
    <content type="html"><![CDATA[<p>在 ECMAScript 中，所有对象并非同等创建的。一般来说，可以创建并使用的对象有以下几种：本地对象、内置对象、宿主对象、自定义对象。其中本地对象包含内置对象。</p><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><blockquote><p>“由ECMAScript实现提供的、不依赖于宿主环境的对象，这些对象在ECMAScript程序执行之前就已经存在了。”开发人员不必显示地实例化内置对象，因为它们已经实例化了。</p></blockquote><h2 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a>Global对象</h2><p>Global对象是不存在的，ECMAScript中的Global对象在某种意义来说作为一个“兜底对象”。不属于其他对象的属性和方法，最终都是它的属性和方法；所有在全局作用域定义的属性和函数，都是Global对象的属性。Web浏览器实现了承担该角色的window对象。</p><ul><li>isNaN()</li><li>isFinite()</li><li>parseInt()</li><li>parseFloat()</li></ul><p>除此之外Global对象还包含其他一些方法：</p><p><br></p><h4 id="URI编码-解码方法"><a href="#URI编码-解码方法" class="headerlink" title="URI编码/解码方法"></a>URI编码/解码方法</h4><p>包括encodeURI()、encodeURIComponent()、decodeURI()、decodeURIComponent()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">encodeURI</span>()对无效字符进行编码，如空格，但不会对特殊字符进行编码，如冒号、正斜杠、问号、井号；如果需要编码特殊字符需要使用<span class="built_in">encodeURIComponent</span>()。</div><div class="line"></div><div class="line"><span class="keyword">var</span> uri = <span class="string">"http://www.baidu.com/ abc.html#def"</span>;</div><div class="line"></div><div class="line">alert(<span class="built_in">encodeURI</span>(uri));          <span class="comment">// http://www.baidu.com/%20abc.html#def</span></div><div class="line">alert(<span class="built_in">encodeURIComponent</span>(uri)); <span class="comment">// http%3A%2F%2Fwww.baidu.com%2F%20abc.html%23def</span></div></pre></td></tr></table></figure></p><p><br></p><h4 id="eval-方法"><a href="#eval-方法" class="headerlink" title="eval()方法"></a>eval()方法</h4><p>eval()方法像是一个ECMAScript解析器，参数为JavaScript字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span>(<span class="string">"alert('hi')"</span>);</div></pre></td></tr></table></figure></p><p>eval()方法可以引用包含环境外的变量，也可以在外部调用eval()内定义的函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> msg = <span class="string">"hello world"</span>;</div><div class="line"><span class="built_in">eval</span>(<span class="string">"alert(msg)"</span>);</div><div class="line"></div><div class="line"><span class="built_in">eval</span>(<span class="string">"function sayHi() &#123; alert('hi'); &#125;"</span>);</div><div class="line">sayHi();</div></pre></td></tr></table></figure></p><p>eval()函数中创建的任何函数或变量都不会变量提升。</p><p>严格模式下外部访问不到eval()中创建的任何变量或函数，为eval赋值也不行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="built_in">eval</span> = <span class="string">"hi"</span>;</div></pre></td></tr></table></figure></p><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><h4 id="min-和max-方法"><a href="#min-和max-方法" class="headerlink" title="min()和max()方法"></a>min()和max()方法</h4><p>确定一组数值中的最大值和最小值，可以接收任意多个数值参数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max(<span class="number">3</span>, <span class="number">54</span>, <span class="number">32</span>, <span class="number">16</span>);</div><div class="line">alert(max);    <span class="comment">// 54</span></div></pre></td></tr></table></figure></p><p>也可以使用apply()方法调用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, values);</div></pre></td></tr></table></figure></p><h4 id="舍入方法"><a href="#舍入方法" class="headerlink" title="舍入方法"></a>舍入方法</h4><ul><li>Math.ceil()，向上舍入。</li><li>Math.floor()，向下舍入。</li><li>Math.round()，四舍五入最近的整数。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alert(<span class="built_in">Math</span>.ceil(<span class="number">25.9</span>));  <span class="comment">// 26</span></div><div class="line">alert(<span class="built_in">Math</span>.floor(<span class="number">25.9</span>)); <span class="comment">// 25</span></div><div class="line">alert(<span class="built_in">Math</span>.round(<span class="number">25.9</span>)); <span class="comment">// 26</span></div></pre></td></tr></table></figure></li></ul><h4 id="random-方法"><a href="#random-方法" class="headerlink" title="random()方法"></a>random()方法</h4><p>Math.random()方法返回大于等于0小于1的一个随机数。</p><blockquote><p>值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectFrom</span>(<span class="params">lowerValue, upperValue</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> choices = upperValue = lowervalue + <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random * choices + lowerValue);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> num = selectFrom(<span class="number">2</span>, <span class="number">10</span>);</div><div class="line">alert(num);</div></pre></td></tr></table></figure><p>用上面的方法可以轻松获得2~10之间的一个整数。</p><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul><li>Math.abs(num)  返回num绝对值</li><li>Math.exp(num)  返回Math.E的num次幂</li><li>Math.log(num)  返回num的自然对数</li><li>Math.pow(num)  返回num的power次幂</li><li>Math.sqrt(num) 返回num的平方根</li></ul><p>参考：<br><a href="http://www.w3school.com.cn/js/pro_js_object_types.asp" target="_blank" rel="external">http://www.w3school.com.cn/js/pro_js_object_types.asp</a><br>《JavaScript高级程序设计》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 ECMAScript 中，所有对象并非同等创建的。一般来说，可以创建并使用的对象有以下几种：本地对象、内置对象、宿主对象、自定义对象。其中本地对象包含内置对象。&lt;/p&gt;
&lt;h2 id=&quot;内置对象&quot;&gt;&lt;a href=&quot;#内置对象&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>flex</title>
    <link href="http://yoursite.com/2018/03/14/Flex/"/>
    <id>http://yoursite.com/2018/03/14/Flex/</id>
    <published>2018-03-13T18:08:45.000Z</published>
    <updated>2018-03-13T18:09:59.406Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000002910324" target="_blank" rel="external">https://segmentfault.com/a/1190000002910324</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex</a><br><a href="https://www.w3cplus.com/css3/flexbox-basics.html" target="_blank" rel="external">https://www.w3cplus.com/css3/flexbox-basics.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002910324&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000002910324&lt;/a&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript创建对象的几种方式</title>
    <link href="http://yoursite.com/2018/03/08/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/08/JavaScript创建对象的几种方式/</id>
    <published>2018-03-07T22:33:11.000Z</published>
    <updated>2018-03-21T17:16:00.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"Nicholas"</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">29</span>,</div><div class="line">  <span class="attr">job</span>: <span class="string">"Software Engineer"</span>,</div><div class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>缺点是使用同一接口创建很多对象，会产生大量重复的代码。</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  o.name = name;</div><div class="line">  o.age = age;</div><div class="line">  o.job = job;</div><div class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure><p>缺点是不能识别对象的类型(即怎样知道一个对象的类型，即使用instanceof识别)。</p><h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure><p>这里在复习一下使用new操作符后的执行过程：</p><ol><li>创建一个新对象。</li><li>将构造函数作用域执行新对象（this指向了新对象）。</li><li>执行构造函数中的代码。</li><li>返回新对象。</li></ol><p>构造函数中的缺点就是，每个方法都要在每个实例上重新创造一遍，ECMAScript中Function也是对象，因此定义一个函数也就是实例化一个对象，导致不同实例上的同名函数是不等的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.ag = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"alert(this.name)"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="组合构造函数模式和原型模式"><a href="#组合构造函数模式和原型模式" class="headerlink" title="组合构造函数模式和原型模式"></a>组合构造函数模式和原型模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.friends = [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: Person,</div><div class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure><p>实例的属性都是在构造函数中定义的，所有实例共享原型链中定义的constructor方法和sayName()方法，而修改其中一个friends并不会影响另一个friends。</p><h2 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">"function"</span>) &#123;</div><div class="line">    Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line">person1.sayName();</div></pre></td></tr></table></figure><p>这段代码只会在初次调用构造函数时才会执行。此后，原型已经初始化，不需要做什么修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对象字面量&quot;&gt;&lt;a href=&quot;#对象字面量&quot; class=&quot;headerlink&quot; title=&quot;对象字面量&quot;&gt;&lt;/a&gt;对象字面量&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的this理解</title>
    <link href="http://yoursite.com/2018/03/03/JavaScript%E7%9A%84this%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/03/03/JavaScript的this理解/</id>
    <published>2018-03-03T03:35:55.000Z</published>
    <updated>2018-04-03T05:08:20.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this理解"><a href="#this理解" class="headerlink" title="this理解"></a>this理解</h2><p>this对象是在运行时基于函数的执行环境的定的。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h4 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h4><p>无论是否在严格模式下，在全局执行上下文中（在任何函数体外部）this 都指代全局对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在浏览器中, window 对象同时也是全局对象：</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></div><div class="line"></div><div class="line">a = <span class="number">37</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 37</span></div><div class="line"></div><div class="line"><span class="keyword">this</span>.b = <span class="string">"MDN"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b)  <span class="comment">// "MDN"</span></div></pre></td></tr></table></figure></p><p>在全局上下文下调用函数，函数中的this，在严格模式下为全局对象，在非严格模式下为undefined。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//在浏览器中：</span></div><div class="line">f1() === <span class="built_in">window</span>;   <span class="comment">//在浏览器中，全局对象是window</span></div><div class="line"></div><div class="line"><span class="comment">//在Node中：</span></div><div class="line">f1() === global;</div></pre></td></tr></table></figure></p><h4 id="函数作为对象的一个属性"><a href="#函数作为对象的一个属性" class="headerlink" title="函数作为对象的一个属性"></a>函数作为对象的一个属性</h4><p>如果函数作为对象的一个属性时，并且作为对象的一个属性被调用时，函数中的this指向该对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">  <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">object.getName() <span class="comment">// "My Object"</span></div></pre></td></tr></table></figure></p><p>匿名函数的this略有不同，通常指向window。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">object.getNameFunc()(); <span class="comment">// "The Window"</span></div></pre></td></tr></table></figure></p><p>匿名函数的在搜索活动对象this和arguments的时候会在作用域链上搜索，匿名函数外的执行环境为getNameFunc的执行环境getNameFunc的执行环境中的活动对象并没有this.name，就会停止搜索，直接将this指向window。</p><p>解决这种问题的方式是把this保存作为活动对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">object.getNameFunc()(); <span class="comment">// "My Object"</span></div></pre></td></tr></table></figure></p><h4 id="函数用call或者apply调用"><a href="#函数用call或者apply调用" class="headerlink" title="函数用call或者apply调用"></a>函数用call或者apply调用</h4><p>如果要想把 this 的值从一个上下文传到另一个，就要用 call 或者apply 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一个对象可以作为call和apply的第一个参数，并且this会被绑定到这个对象。</span></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">'Custom'</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 这个属性是在global对象定义的。</span></div><div class="line"><span class="keyword">var</span> a = <span class="string">'Global'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">whatsThis</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.a;  <span class="comment">// this的值取决于函数的调用方式</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">whatsThis();          <span class="comment">// 'Global'</span></div><div class="line">whatsThis.call(obj);  <span class="comment">// 'Custom'</span></div><div class="line">whatsThis.apply(obj); <span class="comment">// 'Custom'</span></div></pre></td></tr></table></figure></p><h4 id="作为构造函数"><a href="#作为构造函数" class="headerlink" title="作为构造函数"></a>作为构造函数</h4><p>通过new Foo()一个对象的方式调用构造函数，那么在函数中访问this的时候，this指向的是新对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'lucky4'</span>;</div><div class="line">  <span class="keyword">this</span>.year = <span class="number">1993</span>;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Foo &#123; name: "lucky4", year: 1993 &#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</div></pre></td></tr></table></figure></p><p>this指向新创造对象的原因是，在使用new操作符后，调用构造函数会经历一下4个步骤：</p><ol><li>创建一个新对象。</li><li>将构造函数的作用域赋给新对象（因此this就指向了这个新对象）。</li><li>执行构造函数中的代码。</li><li>返回新对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'lucky4'</span>;</div><div class="line">  <span class="keyword">this</span>.year = <span class="number">1993</span>;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Window &#123;...&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo();</div></pre></td></tr></table></figure><p>如果未通过new的方式访问构造函数，那么this将指向Window。</p><h4 id="arrow-function-中的this"><a href="#arrow-function-中的this" class="headerlink" title="arrow function 中的this"></a>arrow function 中的this</h4><p>在箭头函数中，this与封闭词法上下文的this保持一致。在全局代码中，它将被设置为全局对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> globalObject = <span class="keyword">this</span>;</div><div class="line"><span class="keyword">var</span> foo = <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="keyword">this</span>);</div><div class="line"><span class="built_in">console</span>.log(foo() === globalObject); <span class="comment">// true</span></div></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个含有bar方法的obj对象，</span></div><div class="line"><span class="comment">// bar返回一个函数，</span></div><div class="line"><span class="comment">// 这个函数返回this，</span></div><div class="line"><span class="comment">// 这个返回的函数是以箭头函数创建的，</span></div><div class="line"><span class="comment">// 所以它的this被永久绑定到了它外层函数的this。</span></div><div class="line"><span class="comment">// bar的值可以在调用中设置，这反过来又设置了返回函数的值。</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="keyword">this</span>);</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 作为obj对象的一个方法来调用bar，把它的this绑定到obj。</span></div><div class="line"><span class="comment">// 将返回的函数的引用赋值给fn。</span></div><div class="line"><span class="keyword">var</span> fn = obj.bar();</div><div class="line"></div><div class="line"><span class="comment">// 直接调用fn而不设置this，</span></div><div class="line"><span class="comment">// 通常(即不使用箭头函数的情况)默认为全局对象</span></div><div class="line"><span class="comment">// 若在严格模式则为undefined</span></div><div class="line"><span class="built_in">console</span>.log(fn() === obj); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 但是注意，如果你只是引用obj的方法，</span></div><div class="line"><span class="comment">// 而没有调用它</span></div><div class="line"><span class="keyword">var</span> fn2 = obj.bar;</div><div class="line"><span class="comment">// 那么调用箭头函数后，this指向window，因为它从 bar 继承了this。</span></div><div class="line"><span class="built_in">console</span>.log(fn2()() == <span class="built_in">window</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure><h2 id="JavaScript中的this与Java、C-中的this有什么区别"><a href="#JavaScript中的this与Java、C-中的this有什么区别" class="headerlink" title="JavaScript中的this与Java、C++中的this有什么区别?"></a>JavaScript中的this与Java、C++中的this有什么区别?</h2><p>首先看一段Java的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boolean</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">peel</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="comment">/* ... */</span> &#125; &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BananaPeel</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[], args)</span> </span>&#123;</div><div class="line">    Banana a = <span class="keyword">new</span> Banana(),</div><div class="line">           b = <span class="keyword">new</span> Banana();</div><div class="line">    a.peel(<span class="number">1</span>);</div><div class="line">    b.peel(<span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在执行代码的时候，编译器做了一些幕后工作，它把所操作对象的应用作为第一个参数传递给了peel()，上面的两个方法的调用变成了这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Banana.peel(a, <span class="number">1</span>);</div><div class="line">Banana.peel(b, <span class="number">2</span>);</div></pre></td></tr></table></figure></p><p>假设你希望在方法内部获得对当前对象的引用。由于上面引用是由编译器传入的，所以没有表示符可用，为此有个专门的关键字：this。this关键字只能在方法内部使用，表示对“调用方法的那个对象”的引用。</p><p>Java中this的用处有很多包括，返回对当前对象的引用，方便链式调用；将当前对象传递给其他方法；在一个构造器中调用另一个构造器等。</p><p>我认为Java的this和JavaScript的this主要有以下几个区别：</p><ol><li>this的值，Java中的this是一个引用，JavaScript中的this是一个类数组对象。</li><li>Java中的this创建后不可改变，JavaScript中的this可以通过使用call，apply，bind等方式改变。也就是回到了对定义的理解Java中的this是编译时绑定的，而JavaScript中的this是基于运行时绑定的。</li></ol><p>参考：<br><a href="http://www.cnblogs.com/wangfupeng1988/p/3988422.html" target="_blank" rel="external">http://www.cnblogs.com/wangfupeng1988/p/3988422.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this</a><br>《JavaScript高级程序设计》<br>《Java编程思想》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;this理解&quot;&gt;&lt;a href=&quot;#this理解&quot; class=&quot;headerlink&quot; title=&quot;this理解&quot;&gt;&lt;/a&gt;this理解&lt;/h2&gt;&lt;p&gt;this对象是在运行时基于函数的执行环境的定的。&lt;/p&gt;
&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot;
      
    
    </summary>
    
    
      <category term="JavaScipt" scheme="http://yoursite.com/tags/JavaScipt/"/>
    
  </entry>
  
  <entry>
    <title>DOM学习</title>
    <link href="http://yoursite.com/2018/02/27/DOM%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/02/27/DOM学习/</id>
    <published>2018-02-26T17:22:19.000Z</published>
    <updated>2018-03-20T17:54:40.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM（文档对象模型）是针对HTML和XML文档的一个API（应用程序编程接口）。DOM将文档描绘成一个由多层次节点构成的结构。节点分为几种不同类型，每种类型分别表示文档中不同的信息或标记。每个节点拥有自己的特点、数据和方法，另外与其他节点存在某种关系。</p><h2 id="Node-类型"><a href="#Node-类型" class="headerlink" title="Node 类型"></a>Node 类型</h2><p>DOM1级定义了一个Node接口，该接口将由DOM中的所有节点类型实现。这个Node接口在JavaScript中是作为Node类型实现的。</p><p>每个节点都有一个nodeType属性，用于表明节点的类型，由Node类型中定义的12个常量来表示：</p><ul><li>Node.ELEMENT_NODE(1);</li><li>Node.ATTRIBURE_NODE(2);</li><li>Node.TEXT_NODE(3);</li><li>Node.CDATA_SECTION_NODE(4);</li><li>Node.ENTITY_REFERENCE_NODE(5);</li><li>Node.ENTITY_NODE(6);</li><li>Node.PROCESSING_INSTRCTION_NODE(7);</li><li>Node.COMMNET_NODE(8);</li><li>Node.DOCUMENT_NODE(9);</li><li>Node.DOCUMENT_TYPE_NODE(10);</li><li>Node.DOCUMENT_FRAGMENT_NODE(11);</li><li>Node.NOTATION_NODE(12);</li></ul><h4 id="nodeName和nodeValue属性"><a href="#nodeName和nodeValue属性" class="headerlink" title="nodeName和nodeValue属性"></a>nodeName和nodeValue属性</h4><p>使用前最好判断节点类型，对于元素节点，nodeValue值始终为null。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (someNode.nodeType === <span class="number">1</span>) &#123;</div><div class="line">  value = someNode.nodeName</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h4><p>常用的节点关系属性：</p><ul><li>childNodes;</li><li>NodeList;</li><li>parentNode;</li><li>previousSibling;</li><li>nextSibling;</li><li>firstChild;</li><li>lastChild;</li><li>ownerDocument;</li><li>hasChildNodes();</li></ul><p>每个节点都有一个childNodes属性，其中保存着一个NodeList对象。NodeList是一个类数组对象（有length属性以及内容按序保存），它基于DOM结构动态执行查询的结构，因此DOM结构的变化能够自动反映在NodeList对象中。</p><p>一种将类数组对象转换为数组的方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrayOfNodes = <span class="built_in">Array</span>.prototype.slice.call(someNode.childNodes, <span class="number">0</span>)</div></pre></td></tr></table></figure></p><h4 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h4><p>常用的操作节点方法：</p><ul><li>appendChild();</li><li>insertBefore(要插入节点，参照节点，如果参照节点为null，则相当于appendChild操作);</li><li>replaceChild(要插入节点，要替换节点);</li><li>removeChild();</li><li>cloneNode();</li></ul><h2 id="Document-类型"><a href="#Document-类型" class="headerlink" title="Document 类型"></a>Document 类型</h2><p>JavaScript通过Document类型表示文档，在浏览器中，document对象是HTMLDocument的一个实例，表示整个HTML页面。而且，document对象是window对象的一个属性，因此可以将其作为全局对象来访问。Document节点具有下列特征：</p><ul><li>nodeType值为9;</li><li>nodeName值为”#document”;</li><li>nodeValue值为null;</li><li>parentNode值为null;</li><li>ownerDocument值为null;</li></ul><h4 id="文档的子节点"><a href="#文档的子节点" class="headerlink" title="文档的子节点"></a>文档的子节点</h4><p>Document节点的子节点可以是DocumentType、Element、Comment等，还有两个内置访问子节点的方式:documentElement属性（指向<html>元素），childNodes列表访问文档元素。document.body获得<body>引用，document.doctype获得&lt;!DOCTYPE&gt;的引用。</body></html></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement</div><div class="line">alert(html === <span class="built_in">document</span>.childNodes[<span class="number">0</span>])</div><div class="line"></div><div class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body</div><div class="line"><span class="keyword">var</span> doctype = <span class="built_in">document</span>.doctype</div></pre></td></tr></table></figure><h4 id="文档信息"><a href="#文档信息" class="headerlink" title="文档信息"></a>文档信息</h4><p>作为HTMLDocument的一个实例，document对象还有一些标准的Document所没有的属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//取得文档标题</span></div><div class="line"><span class="keyword">var</span> originalTitle = <span class="built_in">document</span>.title</div><div class="line"></div><div class="line"><span class="comment">//设置文档标题</span></div><div class="line"><span class="built_in">document</span>.titl = <span class="string">"New page title"</span></div><div class="line"></div><div class="line"><span class="comment">//取得完整的URL</span></div><div class="line"><span class="keyword">var</span> url = <span class="built_in">document</span>.URL</div><div class="line"></div><div class="line"><span class="comment">//取得域名</span></div><div class="line"><span class="keyword">var</span> domain = <span class="built_in">document</span>.domain</div><div class="line"></div><div class="line"><span class="comment">//取得来源页面的URL</span></div><div class="line"><span class="keyword">var</span> referrer = <span class="built_in">document</span>.referrer</div></pre></td></tr></table></figure></p><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><ul><li>getElementById();</li><li>getElementsByTagName();</li><li>getElementsByName();</li></ul><p>后两个方法会返回一个类数组对象HTMLCollection，它与NodeList类似，它有一个特殊的方法,namedItem()，可以通过元素的name特性取得集合中的项，同时还支持按名称访问项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myImage = images.namedItem(<span class="string">"myImage"</span>)</div><div class="line"><span class="keyword">var</span> myImage = images[<span class="string">"myImage"</span>]</div></pre></td></tr></table></figure><h4 id="特殊集合"><a href="#特殊集合" class="headerlink" title="特殊集合"></a>特殊集合</h4><ul><li>document.forms 包含文档中所有<code>&lt;form&gt;</code> 元素，与document.getElementsByTagName(“form”)得到结果相同。</li><li>document.images 包含文档中所有<code>&lt;img&gt;</code> 元素，与document.getElementsByTageName(“img”)得到结果相同。</li></ul><h4 id="文档写入"><a href="#文档写入" class="headerlink" title="文档写入"></a>文档写入</h4><ul><li>document.write();</li><li>document.writeln();</li><li>document.open();</li><li>document.close();</li></ul><p>如果在文档加载结束后在调用document.write()，那么输出的内容将会重写整个页面。</p><h2 id="Element-类型"><a href="#Element-类型" class="headerlink" title="Element 类型"></a>Element 类型</h2><p>Element类型用于表现XML或HTML元素，Element节点具有以下特征：</p><ul><li>nodeType值为1</li><li>nodeName值为元素的标签名</li><li>nodeValue值为null</li></ul><p>在后的HTML中，标签名始终全以大写表示，所以在使用的时候要注意将其转化为小写的写法比较好。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (element.nodeName.toLowerCase() === <span class="string">"div"</span>) &#123;</div><div class="line">  <span class="comment">// 操作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h4><p>HTML元素由HTMLElement类型表示，HTMLElement类型直接继承自Element并添加了一些属性，包括以下几个：</p><ul><li>id, 元素在文档中的唯一标识符。</li><li>title，有关元素的附加说明信息，一般通过工具提示条显示。</li><li>className，元素的class特性，对应CSS类。</li></ul><h4 id="取得属性"><a href="#取得属性" class="headerlink" title="取得属性"></a>取得属性</h4><p>每个元素都有一个或多个特性，用途是给出响应元素的附加信息，操作特性的方法主要有三个：</p><ul><li>getAttribute()</li><li>setAttribute()</li><li>removeAttribute()</li></ul><p>注意：getAttribute(“style”)返回一个对象，getAttribute(“onclick”)返回一段字符串。</p><h4 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div></pre></td></tr></table></figure><h2 id="Text类型"><a href="#Text类型" class="headerlink" title="Text类型"></a>Text类型</h2><p>文本节点由Text类型表示，包含的是字面解释的纯文本内容。</p><ul><li>nodeType的值为3。</li><li>nodeName的值为”#text”。</li><li>nodeValue的值为节点所包含的文本。</li></ul><h4 id="创建文本节点"><a href="#创建文本节点" class="headerlink" title="创建文本节点"></a>创建文本节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.createTextNode(<span class="string">"Hello World!"</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h2&gt;&lt;p&gt;DOM（文档对象模型）是针对HTML和XML文档的一个API（应用程序编程接口）。DOM将文档描绘成一个由多层次节点构成的结构。节点
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深拷贝</title>
    <link href="http://yoursite.com/2018/02/13/JavaScript%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2018/02/13/JavaScript深拷贝/</id>
    <published>2018-02-12T17:28:18.000Z</published>
    <updated>2018-02-12T18:16:01.020Z</updated>
    
    <content type="html"><![CDATA[<p>只针对Object类型的深拷贝，自己总结的三种方式，分别为：递归的方式、广度优先遍历的方式、使用JSON.parse()方法。</p><ol><li><p>递归：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> key, target</div><div class="line">  <span class="keyword">if</span> (type(source) === <span class="string">"object"</span>) &#123;</div><div class="line">    target = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> source) &#123;</div><div class="line">      <span class="keyword">if</span> (type(source[key]) === <span class="string">"array"</span> || <span class="string">"object"</span>) &#123;</div><div class="line">        target[key] = copy(source[key])</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source[key] !== <span class="literal">undefined</span>) target[key] = source[key]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> target</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>广度优先遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> originQueue = [data];</div><div class="line">    <span class="keyword">var</span> copyQueue = [obj];</div><div class="line">    <span class="keyword">while</span>(originQueue.length &gt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">var</span> _data = originQueue.shift();</div><div class="line">        <span class="keyword">var</span> _obj = copyQueue.shift();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> _data)&#123;</div><div class="line">            <span class="keyword">var</span> _value = _data[key]</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> _value !== <span class="string">'object'</span>)&#123;</div><div class="line">                _obj[key] = _value;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                originQueue.push(_value);</div><div class="line">                _obj[key] = &#123;&#125;;</div><div class="line">                copyQueue.push(_obj[key]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>JSON</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(source))</div></pre></td></tr></table></figure></li></ol><p>参考: <a href="http://blog.csdn.net/sysuzhyupeng/article/details/70340598" target="_blank" rel="external">http://blog.csdn.net/sysuzhyupeng/article/details/70340598</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;只针对Object类型的深拷贝，自己总结的三种方式，分别为：递归的方式、广度优先遍历的方式、使用JSON.parse()方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;递归：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript判断变量类型</title>
    <link href="http://yoursite.com/2018/02/09/JavaScript%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/02/09/JavaScript判断变量类型/</id>
    <published>2018-02-08T17:44:31.000Z</published>
    <updated>2018-03-08T18:38:32.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>6种原始类型(primitives)<ul><li>null</li><li>undefined</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol(ECMAScript6新定义)</li></ul></li><li>Object</li></ul><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote><p>typeof operand</p></blockquote><p>typeof操作符返回一个字符串，代表表达式的类型。</p><h4 id="常见的typeof返回值。"><a href="#常见的typeof返回值。" class="headerlink" title="常见的typeof返回值。"></a>常见的typeof返回值。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>     === <span class="string">"undefined"</span>; <span class="comment">// true</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">true</span>          === <span class="string">"boolean"</span>;   <span class="comment">// true</span></div><div class="line"><span class="keyword">typeof</span> <span class="number">42</span>            === <span class="string">"number"</span>;    <span class="comment">// true</span></div><div class="line"><span class="keyword">typeof</span> <span class="string">"42"</span>          === <span class="string">"string"</span>;    <span class="comment">// true</span></div><div class="line"><span class="keyword">typeof</span> &#123; <span class="attr">life</span>: <span class="number">42</span> &#125;  === <span class="string">"object"</span>;    <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// added in ES6!</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>()      === <span class="string">"symbol"</span>;    <span class="comment">// true</span></div></pre></td></tr></table></figure><p>使用typeof操作符的时候有一些特例，上面并没有列出，下面逐个解释。</p><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span> === <span class="string">"objects"</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure><p>在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此，null的类型标签也成为了 0，typeof null就错误的返回了”object”。ECMAScript提出了一个修复（通过opt-in），但被拒绝。这将导致typeof null === ‘object’。</p><p>如果想要测试为null的value的type，可以使用如下方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</div><div class="line"></div><div class="line">(!a &amp;&amp; <span class="keyword">typeof</span> a === <span class="string">"object"</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* .. */</span> &#125; === <span class="string">"function"</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure><p>因为[[Call]] 在ECMA-262条款中实现了，function包含[[Call]]属性，它允许function被调用，function可以理解为object的子类型。</p><h4 id="array"><a href="#array" class="headerlink" title="array"></a>array</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] === <span class="string">"object"</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure><p>数组同样可以被认为是object的子类型。</p><h4 id="使用new操作符"><a href="#使用new操作符" class="headerlink" title="使用new操作符"></a>使用new操作符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'String'</span>);</div><div class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="keyword">typeof</span> str; <span class="comment">// It will return 'object'</span></div><div class="line"><span class="keyword">typeof</span> num; <span class="comment">// It will return 'object'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>();</div><div class="line"><span class="keyword">typeof</span> func; <span class="comment">// It will return 'function'</span></div></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><blockquote><p>object instanceof constructor</p></blockquote><p>instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line"></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> C();</div><div class="line"></div><div class="line"></div><div class="line">o <span class="keyword">instanceof</span> C; <span class="comment">// true，因为 Object.getPrototypeOf(o) === C.prototype</span></div><div class="line"></div><div class="line"></div><div class="line">o <span class="keyword">instanceof</span> D; <span class="comment">// false，因为 D.prototype不在o的原型链上</span></div><div class="line"></div><div class="line">o <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true,因为Object.prototype.isPrototypeOf(o)返回true</span></div><div class="line">C.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true,同上</span></div><div class="line"></div><div class="line">C.prototype = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> C();</div><div class="line"></div><div class="line">o2 <span class="keyword">instanceof</span> C; <span class="comment">// true</span></div><div class="line"></div><div class="line">o <span class="keyword">instanceof</span> C; <span class="comment">// false,C.prototype指向了一个空对象,这个空对象不在o的原型链上.</span></div><div class="line"></div><div class="line">D.prototype = <span class="keyword">new</span> C(); <span class="comment">// 继承</span></div><div class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> D();</div><div class="line">o3 <span class="keyword">instanceof</span> D; <span class="comment">// true</span></div><div class="line">o3 <span class="keyword">instanceof</span> C; <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>需要注意的是，如果表达式 obj instanceof Foo 返回true，则并不意味着该表达式会永远返回true，因为Foo.prototype属性的值有可能会改变，改变之后的值很有可能不存在于obj的原型链上，这时原表达式的值就会成为false。另外一种情况下，原表达式的值也会改变，就是改变对象obj的原型链的情况，虽然在目前的ES规范中，我们只能读取对象的原型而不能改变它，但借助于非标准的<strong>proto</strong>魔法属性，是可以实现的。比如执行obj.<strong>proto</strong> = {}之后，obj instanceof Foo就会返回false了。</p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isArray = <span class="built_in">Array</span>.isArray ||</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> &#125; ||</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Array]"</span> &#125; ||</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.isPrototypeOf(obj) &#125;</div></pre></td></tr></table></figure><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isNumber = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">"number"</span> &#125; ||</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj <span class="keyword">instanceof</span> <span class="built_in">Number</span> &#125; ||</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Number]"</span> &#125; ||</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(val), type = <span class="keyword">typeof</span> val</div><div class="line">    <span class="keyword">return</span> val != <span class="literal">null</span> &amp;&amp; type != <span class="string">'boolean'</span> &amp;&amp;</div><div class="line">      (type != <span class="string">'string'</span> || val.length) &amp;&amp;</div><div class="line">      !<span class="built_in">isNaN</span>(num) &amp;&amp; <span class="built_in">isFinite</span>(num) || <span class="literal">false</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> class2type = &#123;&#125;, toString = class2type.toString</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">likeArray</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> obj.length ? <span class="literal">true</span> : <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">elements, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> i, key</div><div class="line">  <span class="keyword">if</span> (likeArray) &#123;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (callback.call(elements[i], i, elements[i]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> elements) &#123;</div><div class="line">      <span class="keyword">if</span> (callback.call(elements[key], i, elements[key]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> elements</div><div class="line">&#125;</div><div class="line"></div><div class="line">each(<span class="string">"Boolean Number String Function Array Data RegExp Object Error"</span>.split(<span class="string">" "</span>), <span class="function"><span class="keyword">function</span>(<span class="params">i, name</span>) </span>&#123;</div><div class="line">  class2type[ <span class="string">"[object "</span> + name + <span class="string">"]"</span> ] = name.toLowerCase()</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="built_in">String</span>(obj) :</div><div class="line">    class2type[toString.call(obj)] || <span class="string">"object"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> type(obj) == <span class="string">"object"</span> &#125;</div></pre></td></tr></table></figure><p>参考：<br><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch1.md" target="_blank" rel="external">https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch1.md</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof</a><br>《JavaScript高级程序设计》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;6种原始类型(primitives)&lt;ul&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Zepto.js源码阅读</title>
    <link href="http://yoursite.com/2018/02/03/Zepto-js%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://yoursite.com/2018/02/03/Zepto-js源码阅读/</id>
    <published>2018-02-02T21:50:56.000Z</published>
    <updated>2018-03-15T17:26:56.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Zepto是一个轻量级的针对现代高级浏览器的JavaScript库， 它与jquery有着类似的api。源码相比jQuery较简单，适合初学者阅读。我们这里从Core模块开始阅读。</p><h2 id="Core模块结构"><a href="#Core模块结构" class="headerlink" title="Core模块结构"></a>Core模块结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ...</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="built_in">window</span>.Zepto = Zepto</div><div class="line"><span class="built_in">window</span>.$ === undifined &amp;&amp; (<span class="built_in">window</span>.$ = Zepto)</div></pre></td></tr></table></figure><p>我们可以看到，Zepto库提供了一个Zepto全局变量，该变量指向了，块级作用域执行后返回的结果，同时将这个全局变量赋值给window对象的Zepto和$变量作为属性。</p><h2 id="Core模块核心"><a href="#Core模块核心" class="headerlink" title="Core模块核心"></a>Core模块核心</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> <span class="literal">undefined</span>, key, $, classList, ...</div><div class="line">    zepto = &#123;&#125;</div><div class="line">  ...</div><div class="line"></div><div class="line">  function Z(dom, selector) &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line"></div><div class="line">  zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Z(dom, selector)</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line"></div><div class="line">  zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line">    ...</div><div class="line">    return zepto.Z(dom, selector)</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line"></div><div class="line">  $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> zepto.init(selector, context)</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line"></div><div class="line">  zepto.qsa = <span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>)</span>&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line"></div><div class="line">  $.fn = &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  zepto.Z.prototype = Z.prototype = $.fn</div><div class="line"></div><div class="line">  $.zepto = zepto</div><div class="line"></div><div class="line">  <span class="keyword">return</span> $</div><div class="line">&#125;)()</div></pre></td></tr></table></figure><p>Zepto变量指向了模块级作用域返回的$()函数，返回Zepto collection对象，$()函数里调用了zepto局部对象的init()函数，init()函数调用了zepto对象的Z()方法，Z()方法中又创建了Zepto collection对象。同时设置了Z函数显式原型为$.fn对象，并将zepto内部对象设置为$()函数的属性。</p><h2 id="Zepto-collection对象"><a href="#Zepto-collection对象" class="headerlink" title="Zepto collection对象"></a>Zepto collection对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> i, len = dom ? dom.length : <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) <span class="keyword">this</span>[i] = dom[i]</div><div class="line">  <span class="keyword">this</span>.length = len</div><div class="line">  <span class="keyword">this</span>.selector = selector || <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Zepto collection对象是一个类数组对象，它包括了dom对象数组、获取到的dom元素的个数以及选择器。同时该函数对象的原型对象被设置为$.fn。</p><p>我个人觉得这个对象较难理解的有以下几点，我会在接下来的博客中解释：</p><ol><li>何为类数组对象。</li><li>原型的设置及隐式原型与显示原型。</li><li>为什么在Chrome console输出Zepto collection对象的时候，对象是被[]数组符号包括的。</li></ol><h2 id="逐个方法解析"><a href="#逐个方法解析" class="headerlink" title="逐个方法解析"></a>逐个方法解析</h2><h4 id="zepto-init"><a href="#zepto-init" class="headerlink" title="zepto.init()"></a>zepto.init()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> dom</div><div class="line">  <span class="comment">// 未提供参数，返回空的Zepto collection对象</span></div><div class="line">  <span class="keyword">if</span> (!selector) <span class="keyword">return</span> zepto.Z()</div><div class="line">  <span class="comment">// 处理参数为字符串的情况</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'string'</span>) &#123;</div><div class="line">    selector = selector.trim()</div><div class="line">    <span class="comment">// 如果是一个html片段，那么根据这个片段创建dom元素</span></div><div class="line">    <span class="comment">// 如果是以'&lt;'开头，并且通过fragment正则，通过fragment()方法获取dom</span></div><div class="line">    <span class="comment">// fragment = /^\s*&lt;(\w+|!)[^&gt;]*&gt;/ 匹配空白符等开头，'&lt;&gt;'中间匹配任意字母、下划线或!的匹配项，后面非'&gt;'符号0次或多次</span></div><div class="line">    <span class="keyword">if</span> (selector[<span class="number">0</span>] == <span class="string">'&lt;'</span> &amp;&amp; fragmentRE.test(selector))</div><div class="line">      dom = zepto.fragment(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></div><div class="line">    <span class="comment">// 有context，根据这个context创建Zepto collection，在该collection上根据selector选择</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</div><div class="line">    <span class="comment">// CSS选择器</span></div><div class="line">    <span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 如果提供了function()，在文档加载时执行function</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (isFunction(selector)) <span class="keyword">return</span> $(<span class="built_in">document</span>).ready(selector)</div><div class="line">  <span class="comment">// 如果Zepto collection已给出，则直接返回</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (zepto.isZ(selector)) <span class="keyword">return</span> selector</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 如果选择器是一个数组，将数组中为null的元素去掉</span></div><div class="line">    <span class="keyword">if</span> (isArray(selector)) dom = compact(selector)</div><div class="line">    <span class="comment">// 如果选择器是对象(如dom对象)，则将其用数组封装</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isObject(selector))</div><div class="line">      dom = [selector], selector = <span class="literal">null</span></div><div class="line">    <span class="comment">// If it's a html fragment, create nodes from it</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fragmentRE.test(selector))</div><div class="line">      dom = zepto.fragment(selector.trim(), <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></div><div class="line">    <span class="comment">// If there's a context, create a collection on that context first, and select</span></div><div class="line">    <span class="comment">// nodes from there</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</div><div class="line">    <span class="comment">// And last but no least, if it's a CSS selector, use it to select nodes.</span></div><div class="line">    <span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// create a new Zepto collection from the nodes found</span></div><div class="line">  <span class="keyword">return</span> zepto.Z(dom, selector)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上段代码为Zepto选择器功能的逻辑，主要通过以下几种方式进行获取dom：</p><ul><li>选择器为字符串<ul><li>选择器为<html>标签</html></li><li>有context，先获取context，在进行选择</li><li>选择器为CSS选择器</li></ul></li><li>选择器为function()</li><li>选择器为Zepto collection</li><li>选择器为dom、object、数组、html片段等</li></ul><h4 id="each"><a href="#each" class="headerlink" title="$.each()"></a>$.each()</h4><p>$.each(collection, function(index, item){ … })  =&gt;  collection<br>遍历数组元素或以key-value值对方式遍历对象。回调函数返回 false 时停止遍历。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$.each = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> i, key</div><div class="line">  <span class="keyword">if</span> (likeArray(elements)) &#123;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++)</div><div class="line">      <span class="keyword">if</span> (callback.call(elements[i], i, elements[i]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> elements)</div><div class="line">      <span class="keyword">if</span> (callback.call(elements[key], key, elements[key]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> elements</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>$.each()方法与数组Array.map()方法的区别就是，$.each()方法考虑了集合的情况，使用Array.call()方法对集合内每个元素执行回调函数(i, elements[i]做为参数)，并返回处理后结果。</p><h4 id="contains"><a href="#contains" class="headerlink" title="$.contains()"></a>$.contains()</h4><p>$.contains(parent, node)  =&gt;  boolean<br>检查父节点是否包含给定的dom节点，如果两者是相同的节点，则返回 false。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$.contains = <span class="built_in">document</span>.documentElement.contains ?</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">parent, node</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> parent !== node &amp;&amp; parent.contains(node)</div><div class="line">  &#125; :</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">parent, node</span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span> (node &amp;&amp; (node = node.parentNode))</div><div class="line">      <span class="keyword">if</span> (node === parent) <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>方法首先判断了浏览器是否支持Node.contains()方法,如果不支持，则一层一层判断node的父节点和parent是否相等。</p><h4 id="extend"><a href="#extend" class="headerlink" title="$.extend()"></a>$.extend()</h4><p>$.extend(target, [source, [source2, …]])  =&gt;  target<br>$.extend(true, target, [source, …])  =&gt;  target<br>通过源对象扩展目标对象的属性，源对象属性将覆盖目标对象属性。<br>默认情况下为，复制为浅拷贝（浅复制）。如果第一个参数为true表示深度拷贝（深度复制）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">target, source, deep</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> source)</div><div class="line">    <span class="keyword">if</span> (deep &amp;&amp; (isPlainObject(source[key]) || isArray(source[key]))) &#123;</div><div class="line">      <span class="keyword">if</span> (isPlainObject(source[key]) &amp;&amp; !isPlainObject(target[key]))</div><div class="line">        target[key] = &#123;&#125;</div><div class="line">      <span class="keyword">if</span> (isArray(source[key]) &amp;&amp; !isArray(target[key]))</div><div class="line">        target[key] = []</div><div class="line">      extend(target[key], source[key], deep)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (source[key] !== <span class="literal">undefined</span>) target[key] = source[key]</div><div class="line">&#125;</div><div class="line"></div><div class="line">$.extend = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> deep, args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target == <span class="string">'boolean'</span>) &#123;</div><div class="line">    deep = target</div><div class="line">    target = args.shift()</div><div class="line">  &#125;</div><div class="line">  args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123; extend(target, arg, deep) &#125;)</div><div class="line">  <span class="keyword">return</span> target</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>$.extend方法处理的是一个可选参数的逻辑，首先假设deep为undifined。</p><ul><li>如果第一个参数是布尔型则将deep设置为true，将args[0]表示未target, source为args[1…]。</li><li>如果第一个参数不是布尔型则deep为undifined，参数target表示target，source为args[0…]。</li><li>执行extend()方法，参数为target和source的组合。</li></ul><p>extend()方法为一个递归深拷贝的方法，其中处理了当目标target[key]存在或者不存在的情况。</p><ul><li>如果存在，则将其覆盖。</li><li>如果不存在，则创建新的空对象/数组，进行存储。</li></ul><h4 id="isNumeric"><a href="#isNumeric" class="headerlink" title="$.isNumeric()"></a>$.isNumeric()</h4><p>$.isNumeric(value)  =&gt;  boolean<br>如果该值为有限数值或一个字符串表示的数字，则返回ture。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$.isNumeric = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> num = <span class="built_in">Number</span>(val), type = <span class="keyword">typeof</span> val</div><div class="line">  <span class="keyword">return</span> val != <span class="literal">null</span> &amp;&amp; type != <span class="string">'boolean'</span> &amp;&amp;</div><div class="line">    (type != <span class="string">'string'</span> || val.length) &amp;&amp;</div><div class="line">    !<span class="built_in">isNaN</span>(num) &amp;&amp; <span class="built_in">isFinite</span>(num) || <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个方法应该注意的是使用Number(val)进行类型装换后，非字符串类型会被转换为NaN或者Finite类型。</p><h4 id="fn-find"><a href="#fn-find" class="headerlink" title="$fn.find()"></a>$fn.find()</h4><p>find(selector)  =&gt;  collection<br>find(collection)  =&gt;  collection v1.0+<br>find(element)  =&gt;  collection v1.0+<br>在当对象前集合内查找符合CSS选择器的每个元素的后代元素。<br>如果给定Zepto对象集合或者元素，过滤它们，只有当它们在当前Zepto集合对象中时，才回被返回。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">find: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> result, $<span class="keyword">this</span> = <span class="keyword">this</span></div><div class="line">  <span class="keyword">if</span> (!selector) result = $()</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'object'</span>)</div><div class="line">    result = $(selector).filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> node = <span class="keyword">this</span></div><div class="line">      <span class="keyword">return</span> emptyArray.some.call($<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">parent</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> $.contains(parent, node)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.length == <span class="number">1</span>) result = $(zepto.qsa(<span class="keyword">this</span>[<span class="number">0</span>], selector))</div><div class="line">  <span class="keyword">else</span> result = <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> zepto.qsa(<span class="keyword">this</span>, selector) &#125;)</div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>$this代表执行find()方法的Zepto collection对象。选择器为collection/dom时，只有当它们在当前Zepto集合对象中时，才回被返回。</p><h4 id="fn-after"><a href="#fn-after" class="headerlink" title="$fn.after()"></a>$fn.after()</h4><p>after(content)  =&gt;  self<br>在每个匹配的元素后插入内容。内容可以为html字符串，dom节点，或者节点组成的数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">adjacencyOperators = [ <span class="string">'after'</span>, <span class="string">'prepend'</span>, <span class="string">'before'</span>, <span class="string">'append'</span> ]</div><div class="line"></div><div class="line">adjacencyOperators.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">operator, operatorIndex</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> inside = operatorIndex % <span class="number">2</span> <span class="comment">// =&gt; prepend, append 用于之后判断是否需要选择父节点</span></div><div class="line"></div><div class="line">  $.fn[operator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 参数可以是nodes, arrays of nodes, Zepto objects and HTML strings</span></div><div class="line">    <span class="keyword">var</span> argType, nodes = $.map(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> arr = []</div><div class="line">          argType = type(arg)</div><div class="line">          <span class="keyword">if</span> (argType == <span class="string">"array"</span>) &#123;</div><div class="line">            arg.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">              <span class="keyword">if</span> (el.nodeType !== <span class="literal">undefined</span>) <span class="keyword">return</span> arr.push(el)</div><div class="line">              <span class="keyword">else</span> <span class="keyword">if</span> ($.zepto.isZ(el)) <span class="keyword">return</span> arr = arr.concat(el.get())</div><div class="line">              arr = arr.concat(zepto.fragment(el))</div><div class="line">            &#125;)</div><div class="line">            <span class="keyword">return</span> arr</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> argType == <span class="string">"object"</span> || arg == <span class="literal">null</span> ?</div><div class="line">            arg : zepto.fragment(arg)</div><div class="line">        &#125;),</div><div class="line">        parent, copyByClone = <span class="keyword">this</span>.length &gt; <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> (nodes.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">_, target</span>)</span>&#123;</div><div class="line">      parent = inside ? target : target.parentNode</div><div class="line"></div><div class="line">      <span class="comment">// convert all methods to a "before" operation</span></div><div class="line">      target = operatorIndex == <span class="number">0</span> ? target.nextSibling :</div><div class="line">               operatorIndex == <span class="number">1</span> ? target.firstChild :</div><div class="line">               operatorIndex == <span class="number">2</span> ? target :</div><div class="line">               <span class="literal">null</span></div><div class="line"></div><div class="line">      <span class="keyword">var</span> parentInDocument = $.contains(<span class="built_in">document</span>.documentElement, parent)</div><div class="line"></div><div class="line">      nodes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (copyByClone) node = node.cloneNode(<span class="literal">true</span>)</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!parent) <span class="keyword">return</span> $(node).remove()</div><div class="line"></div><div class="line">        parent.insertBefore(node, target)</div><div class="line">        <span class="keyword">if</span> (parentInDocument) traverseNode(node, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span> (el.nodeName != <span class="literal">null</span> &amp;&amp; el.nodeName.toUpperCase() === <span class="string">'SCRIPT'</span> &amp;&amp;</div><div class="line">             (!el.type || el.type === <span class="string">'text/javascript'</span>) &amp;&amp; !el.src)&#123;</div><div class="line">            <span class="keyword">var</span> target = el.ownerDocument ? el.ownerDocument.defaultView : <span class="built_in">window</span></div><div class="line">            target[<span class="string">'eval'</span>].call(target, el.innerHTML)</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Zepto是一个轻量级的针对现代高级浏览器的JavaScript库， 它与jquery有着类似的api。源码相比jQuery较简单，适合初学
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Ajax基础</title>
    <link href="http://yoursite.com/2018/01/27/Ajax%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/01/27/Ajax基础/</id>
    <published>2018-01-26T18:53:02.000Z</published>
    <updated>2018-03-18T03:59:57.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Ajax？"><a href="#什么是Ajax？" class="headerlink" title="什么是Ajax？"></a>什么是Ajax？</h2><blockquote><p>Ajax全称为”Asynchronous JavaScript and XML”(异步的JavaScript和XML),Ajax的核心是XMLHttpRequest对象，它可以和服务器进行通信，发送异步请求，接收服务器发来的数据。其中数据的格式可以包括JSON, XML, HTML和文本等格式。</p></blockquote><p>Ajax的优势：</p><ol><li><p>不需插件支持<br>Ajax不需要任何浏览器插件，就可以被浏览器所支持。</p></li><li><p>优秀的用户体验<br>能在不刷新整个页面的前提下更新数据。</p></li><li><p>提高Web程序的性能<br>传统模式中，数据的提交是通过表单来实现的，而数据获取是靠全页面刷新来重新获取整个页面内容。Ajax只是通过XMLHttpRequest对象向服务器端提交希望提交的数据。</p></li><li><p>减轻服务器和宽带的负担<br>Ajax的工作原理相当于在用户和服务器之间加了一个中间层，使用户操作与服务器响应异步化。它在客户端创建Ajax引擎，把传统方式下的一些服务器负担的工作转移到客户端。</p></li></ol><p>Ajax的不足</p><ol><li>浏览器对XMLHttpRequest对象的支持度不足</li><li>对搜索引擎的支持的不足</li><li>开发和调试工具的缺乏</li></ol><h2 id="核心-XMLHttpRequest"><a href="#核心-XMLHttpRequest" class="headerlink" title="核心:XMLHttpRequest"></a>核心:XMLHttpRequest</h2><p>解释：</p><blockquote><p>XMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</p></blockquote><p>历史：</p><blockquote><p>XMLHttpRequest 最初由微软设计，随后被 Mozilla、Apple 和 Google采纳。如今，该对象已经被 W3C组织标准化。 通过它，你可以很容易的取回一个 URL 上的资源数据。尽管名字里有 XML，但 XMLHttpRequest 可以取回所有类型的数据资源，并不局限于 XML。而且除了 HTTP ，它还支持 file 和 ftp 协议。</p></blockquote><p>构造函数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XMLHttpRequest()</div></pre></td></tr></table></figure></p><p>常用属性：</p><ol><li><p>onreadystatechange<br>一个方法（回调函数），当readyState属性改变时会调用它。</p></li><li><p>readyState<br>一个整型数字，代表请求的5种状态。<br>值&emsp;&emsp;状态&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;描述<br>0&emsp;&emsp;UNSENT（未打开）&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;open()方法还未被调用<br>1&emsp;&emsp;OPENED（未发送）&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;open()方法已被调用<br>2&emsp;&emsp;HEADERS_RECEIVED（以获取响应头）&emsp;send()方法已被调用，响应头和响应状态已经返回<br>3&emsp;&emsp;LOADING（正在下载响应体）&emsp;&emsp;&emsp;&emsp;&emsp;响应体下载中；responseText中已经获取了部分数据<br>4&emsp;&emsp;DONE（请求完成）&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;整个请求过程已经完毕</p></li><li><p>response<br>响应实体，多种类型，失败为null。</p></li><li><p>responseText<br>响应实体为文本,失败为null。</p></li><li><p>responseType<br>期待响应的类型。</p></li><li><p>responseXML<br>响应的类型是Document。</p></li><li><p>status<br>响应的状态码。</p></li><li><p>statusText<br>响应的状态信息。</p></li><li><p>timeout<br>代表着一个请求在被自动终止前所消耗的毫秒数。</p></li></ol><p>常用方法:</p><ol><li><p>abort()<br>请求被发送后（send方法调用后），终止请求。</p></li><li><p>open(method, url, async, user, password)<br>初始化请求。（method必须为大写）</p></li><li><p>send(body)<br>发送请求,请求为异步的话方法会立刻返回，请求为同步的话方法会等到响应到达时返回。body为发送内容。</p></li><li><p>setRequestHeader(header, value)<br>设置请求的header，使用原生ajax的时候，发送请求需要设置的包括Access-Control-Allow-Origin，Content-Type头信息。</p></li></ol><p>事件接口：</p><ol><li><p>loadstart<br>Progress has begun.</p></li><li><p>progress<br>In progress.</p></li><li><p>error<br>Progression failed.</p></li><li><p>abort<br>Progression is terminated.</p></li><li><p>timeout<br>Progression is terminated due to preset time expiring.</p></li><li><p>load<br>Progression is successful.</p></li><li><p>loadend<br>Progress has stopped.</p></li></ol><h2 id="使用XMLHttpRequest对象发送Ajax请求的基本步骤"><a href="#使用XMLHttpRequest对象发送Ajax请求的基本步骤" class="headerlink" title="使用XMLHttpRequest对象发送Ajax请求的基本步骤"></a>使用XMLHttpRequest对象发送Ajax请求的基本步骤</h2><ol><li>创建XMLHttpRequest对象。</li><li>告诉XMLHttpRequest对象由哪一个函数处理响应。</li><li>使用XMLHttpRequest对象的open方法，设置请求类型，请求地址以及是否采用异步。</li><li>使用XMLHttpRequest对象的send方法，方法的参数是任何想要发送的内容。如果是GET请求，那么send方法的参数为null；如果是POST请求，那么需要在发送请求前设置请求的MIME类型。</li></ol><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><p>这个Ajax例子是一个输入框，输入省份的首字母，在输入框下面会显示省份的所有城市。<br>这里采用了mock的方式生成城市的数据，为了以后扩展扩展这个应用，我们使用模块化的方式编写。</p><p>项目目录：<br>dist<br>&nbsp;&nbsp;&nbsp;&nbsp;bundle.js<br>mock<br>&nbsp;&nbsp;&nbsp;&nbsp;data.js<br>src<br>&nbsp;&nbsp;&nbsp;&nbsp;search.js<br>index.html<br>package.json<br>webpack.config.js</p><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;Ajax-Search&lt;/title&gt;</div><div class="line">  &lt;style&gt;</div><div class="line">    .container &#123;</div><div class="line">      overflow: hidden;</div><div class="line">      width: 100%;</div><div class="line">    &#125;</div><div class="line">  &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class=&quot;container&quot; id=&quot;container&quot;&gt;</div><div class="line">  &lt;input type=&quot;search&quot; id=&quot;province&quot; /&gt;</div><div class="line">  &lt;div id=&quot;city-container&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><h4 id="data-js"><a href="#data-js" class="headerlink" title="data.js"></a>data.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> HLJ = Mock.mock(<span class="regexp">/hlj\.json/</span>, &#123;</div><div class="line">  <span class="string">'city'</span>: &#123;</div><div class="line">    <span class="string">'110000'</span>: <span class="string">'哈尔滨市'</span>,</div><div class="line">    <span class="string">'110001'</span>: <span class="string">'齐齐哈尔市'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> LN = Mock.mock(<span class="regexp">/ln\.json/</span>, &#123;</div><div class="line">  <span class="string">'city'</span>: &#123;</div><div class="line">    <span class="string">'220000'</span>: <span class="string">'沈阳市'</span>,</div><div class="line">    <span class="string">'220001'</span>: <span class="string">'大连市'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> JL = Mock.mock(<span class="regexp">/jl\.json/</span>, &#123;</div><div class="line">  <span class="string">'city'</span>: &#123;</div><div class="line">    <span class="string">'330000'</span>: <span class="string">'长春市'</span>,</div><div class="line">    <span class="string">'330001'</span>: <span class="string">'吉林市'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> ZJ = Mock.mock(<span class="regexp">/zj\.json/</span>, &#123;</div><div class="line">  <span class="string">'city'</span>: &#123;</div><div class="line">    <span class="string">'440000'</span>: <span class="string">'杭州市'</span>,</div><div class="line">    <span class="string">'440001'</span>: <span class="string">'舟山市'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> GZ = Mock.mock(<span class="regexp">/gz\.json/</span>, &#123;</div><div class="line">  <span class="string">'city'</span>: &#123;</div><div class="line">    <span class="string">'550000'</span>: <span class="string">'广州市'</span>,</div><div class="line">    <span class="string">'550001'</span>: <span class="string">'惠州市'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  HLJ,</div><div class="line">  LN,</div><div class="line">  JL,</div><div class="line">  ZJ,</div><div class="line">  GZ</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="search-js"><a href="#search-js" class="headerlink" title="search.js"></a>search.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'../mock/data'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> httpRequest = <span class="literal">null</span>;</div><div class="line"><span class="keyword">var</span> containerElem = <span class="built_in">document</span>.getElementById(<span class="string">'city-container'</span>);</div><div class="line"><span class="keyword">var</span> inputElem = <span class="built_in">document</span>.getElementById(<span class="string">'province'</span>);</div><div class="line">inputElem.addEventListener(<span class="string">'input'</span>, getCity);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCity</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> province = e.target.value;</div><div class="line">  makeRequest(province);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeRequest</span>(<span class="params">keyword</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">    httpRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">    httpRequest = <span class="keyword">new</span> ActiveXObject();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!httpRequest) &#123;</div><div class="line">    alert(<span class="string">'Giving up : Cannot create an XMLHTTP instance'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  httpRequest.onreadystatechange = resolve;</div><div class="line">  httpRequest.open(<span class="string">'GET'</span>, keyword + <span class="string">'.json'</span>, <span class="literal">true</span>);</div><div class="line">  httpRequest.send(<span class="literal">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cityContainerElem = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</div><div class="line">  <span class="keyword">var</span> cityData = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">var</span> cityElem = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">var</span> city = <span class="string">'no data'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</div><div class="line">    <span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</div><div class="line">      cityData = <span class="built_in">JSON</span>.parse(httpRequest.responseText).city;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> cityData) &#123;</div><div class="line">        city = <span class="built_in">document</span>.createTextNode(cityData[item]);</div><div class="line">        cityElem = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">        cityElem.appendChild(city);</div><div class="line">        cityContainerElem.appendChild(cityElem);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (httpRequest.status === <span class="number">404</span>) &#123;</div><div class="line">      city = <span class="built_in">document</span>.createTextNode(city);</div><div class="line">      cityElem = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">      cityElem.appendChild(city);</div><div class="line">      cityContainerElem.appendChild(cityElem);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (containerElem.childNodes.length !== <span class="number">0</span>) &#123;</div><div class="line">      containerElem.replaceChild(cityContainerElem, containerElem.firstChild);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      containerElem.appendChild(cityContainerElem);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同时我写的一个简单弹幕demo地址：<a href="https://github.com/Lucky4/barrage" target="_blank" rel="external">https://github.com/Lucky4/barrage</a></p><p>参考：<br><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX</a><br><a href="https://xhr.spec.whatwg.org/" target="_blank" rel="external">https://xhr.spec.whatwg.org/</a><br>《锋利的JQuery》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Ajax？&quot;&gt;&lt;a href=&quot;#什么是Ajax？&quot; class=&quot;headerlink&quot; title=&quot;什么是Ajax？&quot;&gt;&lt;/a&gt;什么是Ajax？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Ajax全称为”Asynchronous JavaScript a
      
    
    </summary>
    
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>babel学习</title>
    <link href="http://yoursite.com/2018/01/08/Babel%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/01/08/Babel学习/</id>
    <published>2018-01-08T03:50:06.000Z</published>
    <updated>2018-01-08T04:04:13.436Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md" target="_blank" rel="external">https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
      
    
    </summary>
    
    
      <category term="JavaScript babel" scheme="http://yoursite.com/tags/JavaScript-babel/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript一个困惑已久的语法</title>
    <link href="http://yoursite.com/2017/12/19/JavaScript%E4%B8%80%E4%B8%AA%E5%9B%B0%E6%83%91%E5%B7%B2%E4%B9%85%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/19/JavaScript一个困惑已久的语法/</id>
    <published>2017-12-19T04:09:41.000Z</published>
    <updated>2018-02-08T17:52:07.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在写React的时候，关于state的一种写法一直没有看懂。</p><p>正常这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">x</span>: <span class="number">1</span>,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.aa = <span class="keyword">this</span>.aa.bind(<span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.x)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>困惑的情形：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  state = &#123;</div><div class="line">    <span class="attr">x</span>: <span class="number">1</span>,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  aa = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.x);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>经过我的一番搜索，终于找到了答案，这是ES的一种新提案，并没有普及，使用的时候需要使用插件，叫做babel-plugin-transform-class-properties，它将原来将类属性写在constructor的写法简化为写在类中就可以了。</p><p>相关参考：</p><ul><li><a href="http://babeljs.io/docs/plugins/transform-class-properties" target="_blank" rel="external">http://babeljs.io/docs/plugins/transform-class-properties</a></li><li><a href="https://github.com/tc39/proposal-class-fields" target="_blank" rel="external">https://github.com/tc39/proposal-class-fields</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前在写React的时候，关于state的一种写法一直没有看懂。&lt;/p&gt;
&lt;p&gt;正常这样写：&lt;br&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>React-ref属性</title>
    <link href="http://yoursite.com/2017/12/18/React-ref%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2017/12/18/React-ref属性/</id>
    <published>2017-12-18T04:13:15.000Z</published>
    <updated>2018-02-08T17:52:28.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ref属性介绍"><a href="#ref属性介绍" class="headerlink" title="ref属性介绍"></a>ref属性介绍</h2><p>在React典型的数据流中，修改子组件都是通过重新渲染新的props来完成的。但是，当你想要在数据流之外修改子组件，就需要React提供的ref属性。</p><p>ref在元素中声明，代表着该元素提供了可以操作的DOM操作（React组件中提供的是虚拟DOM操作）。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>处理focus、text selection</li><li>处理交互动画</li><li>与第三方DOM库集成</li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ol><li>使用回调函数<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.focusTextInput = <span class="keyword">this</span>.focusTextInput.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  focusTextInput() &#123;</div><div class="line">    <span class="keyword">this</span>.textInput.focus();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input</div><div class="line">          type="text"</div><div class="line">          ref=&#123;(input) =&gt; &#123; this.textInput = input; &#125;&#125; /&gt;</div><div class="line">        &lt;input</div><div class="line">          type="button"</div><div class="line">          value="Focus the text input"</div><div class="line">          onClick=&#123;this.focusTextInput&#125;</div><div class="line">        /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>点击按钮后，input输入框会focus。</p><p>React会在组件加载后调用ref回调函数，在componentDidMount函数周期之前invoke或在componentDidUpdate周期中执行。</p><p>需要注意的是，由于 this.refs.[refName] 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。</p><ol><li>使用ref属性名<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.refs.myTextInput.focus();</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input type="text" ref="myTextInput" /&gt;</div><div class="line">        &lt;input type="button" value="Focus the text input" onClick=&#123;this.handleClick&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li></ol><p>React不建议用refs，因为有许多弊端。<a href="https://github.com/facebook/react/pull/8333#issuecomment-271648615" target="_blank" rel="external">https://github.com/facebook/react/pull/8333#issuecomment-271648615</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ref属性介绍&quot;&gt;&lt;a href=&quot;#ref属性介绍&quot; class=&quot;headerlink&quot; title=&quot;ref属性介绍&quot;&gt;&lt;/a&gt;ref属性介绍&lt;/h2&gt;&lt;p&gt;在React典型的数据流中，修改子组件都是通过重新渲染新的props来完成的。但是，当你想要在数据流
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript事件对象中e.target和e.currentTarget区别</title>
    <link href="http://yoursite.com/2017/12/15/JavaScript%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E4%B8%ADe-target%E5%92%8Ce-currentTarget%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/12/15/JavaScript事件对象中e-target和e-currentTarget区别/</id>
    <published>2017-12-14T17:41:43.000Z</published>
    <updated>2018-02-08T17:59:51.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在网页中，点击在多个导航栏切换，被点击的那个导航栏与其他样式不同。然而，看似简答的问题，里面的坑还是有的。</p><p>下面是关键代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function TopicItem(props) &#123;</div><div class="line">  &lt;li</div><div class="line">    key=&#123;props.id&#125;</div><div class="line">    id=&#123;props.id&#125;</div><div class="line">    calssName=&#123;props.activeTopicId === props.id ? &quot;active&quot;: &quot;&quot;&#125;</div><div class="line">    onClick=&#123;props.togleTopic&#125;</div><div class="line">  &gt;</div><div class="line">    &lt;Link to=&#123;props.hash&#125;&gt;</div><div class="line">      &#123;props.title&#125;</div><div class="line">    &lt;/Link&gt;</div><div class="line">  &lt;/li&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class component extends React.Component &#123;</div><div class="line">  state = &#123;</div><div class="line">    activeTopicId: TOPICS[0].id,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  togleTopic = (e) =&gt; &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      activeTopicId: e.currentTarget.id    // 这里是关键</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到我们的导航栏结构是li标签里面嵌套着a标签，我想通过点击导航栏，获得点击li标签的id来判断，设置样式，但我么有一点要注意：事件对象有两个类似的属性,target和currentTarget。</p><blockquote><p>A reference to the object that dispatched the event. It is different from event.currentTarget when the event handler is called during the bubbling or capturing phase of the event.</p></blockquote><p>从MDN的官网上说明可以看出它们都是指向事件对象的一个引用，一个是在事件捕获的时候调用，一个是在事件冒泡的时候调用。</p><p>所以，如果我使用e.target.id来获得activeTopicId是不可能获得的，因为e.target指向的对象时a标签，没有id。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在网页中，点击在多个导航栏切换，被点击的那个导航栏与其他样式不同。然而，看似简答的问题，里面的坑还是有的。&lt;/p&gt;
&lt;p&gt;下面是关键代码：&lt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
